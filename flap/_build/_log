### Starting build.
# Target: src/flap.ml.depends, tags: { extension:ml, file:src/flap.ml, ocaml, ocamldep, package(str), package(unix), quiet, traverse }
ocamlfind ocamldep -package unix -package str -modules src/flap.ml > src/flap.ml.depends
# Target: src/commandLineOptions.ml.depends, tags: { extension:ml, file:src/commandLineOptions.ml, ocaml, ocamldep, package(str), package(unix), quiet, traverse }
ocamlfind ocamldep -package unix -package str -modules src/commandLineOptions.ml > src/commandLineOptions.ml.depends
# Target: src/options.ml.depends, tags: { extension:ml, file:src/options.ml, ocaml, ocamldep, package(str), package(unix), quiet, traverse }
ocamlfind ocamldep -package unix -package str -modules src/options.ml > src/options.ml.depends
# Target: src/utilities/error.mli.depends, tags: { extension:mli, file:src/utilities/error.mli, ocaml, ocamldep, package(str), package(unix), quiet, traverse }
ocamlfind ocamldep -package unix -package str -modules src/utilities/error.mli > src/utilities/error.mli.depends
# Target: src/utilities/position.mli.depends, tags: { extension:mli, file:src/utilities/position.mli, ocaml, ocamldep, package(str), package(unix), quiet, traverse }
ocamlfind ocamldep -package unix -package str -modules src/utilities/position.mli > src/utilities/position.mli.depends
# Target: src/utilities/position.cmi, tags: { byte, compile, extension:mli, file:src/utilities/position.mli, interf, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlc -c -package unix -package str -I src/utilities -I src -I src/hopix -I src/common -I src/lib/pprint -o src/utilities/position.cmi src/utilities/position.mli
# Target: src/utilities/error.cmi, tags: { byte, compile, extension:mli, file:src/utilities/error.mli, interf, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlc -c -package unix -package str -I src/utilities -I src -I src/hopix -I src/common -I src/lib/pprint -o src/utilities/error.cmi src/utilities/error.mli
# Target: src/version.ml.depends, tags: { extension:ml, file:src/version.ml, ocaml, ocamldep, package(str), package(unix), quiet, traverse }
ocamlfind ocamldep -package unix -package str -modules src/version.ml > src/version.ml.depends
# Target: src/options.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:src/options.cmo, file:src/options.ml, implem, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlc -c -package unix -package str -I src -I src/hopix -I src/utilities -I src/common -I src/lib/pprint -o src/options.cmo src/options.ml
# Target: src/version.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:src/version.cmo, file:src/version.ml, implem, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlc -c -package unix -package str -I src -I src/hopix -I src/utilities -I src/common -I src/lib/pprint -o src/version.cmo src/version.ml
# Target: src/common/compilers.mli.depends, tags: { extension:mli, file:src/common/compilers.mli, ocaml, ocamldep, package(str), package(unix), quiet, traverse }
ocamlfind ocamldep -package unix -package str -modules src/common/compilers.mli > src/common/compilers.mli.depends
# Target: src/common/languages.mli.depends, tags: { extension:mli, file:src/common/languages.mli, ocaml, ocamldep, package(str), package(unix), quiet, traverse }
ocamlfind ocamldep -package unix -package str -modules src/common/languages.mli > src/common/languages.mli.depends
# Target: src/common/languages.cmi, tags: { byte, compile, extension:mli, file:src/common/languages.mli, interf, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlc -c -package unix -package str -I src/common -I src -I src/hopix -I src/utilities -I src/lib/pprint -o src/common/languages.cmi src/common/languages.mli
# Target: src/hopix/hopixInitialization.ml.depends, tags: { extension:ml, file:src/hopix/hopixInitialization.ml, ocaml, ocamldep, package(str), package(unix), quiet, traverse }
ocamlfind ocamldep -package unix -package str -modules src/hopix/hopixInitialization.ml > src/hopix/hopixInitialization.ml.depends
# Target: src/common/compilers.cmi, tags: { byte, compile, extension:mli, file:src/common/compilers.mli, interf, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlc -c -package unix -package str -I src/common -I src -I src/hopix -I src/utilities -I src/lib/pprint -o src/common/compilers.cmi src/common/compilers.mli
# Target: src/hopix/hopix.ml.depends, tags: { extension:ml, file:src/hopix/hopix.ml, ocaml, ocamldep, package(str), package(unix), quiet, traverse }
ocamlfind ocamldep -package unix -package str -modules src/hopix/hopix.ml > src/hopix/hopix.ml.depends
# Target: src/hopix/hopixAST.ml.depends, tags: { extension:ml, file:src/hopix/hopixAST.ml, ocaml, ocamldep, package(str), package(unix), quiet, traverse }
ocamlfind ocamldep -package unix -package str -modules src/hopix/hopixAST.ml > src/hopix/hopixAST.ml.depends
# Target: src/hopix/hopixInterpreter.ml.depends, tags: { extension:ml, file:src/hopix/hopixInterpreter.ml, ocaml, ocamldep, package(str), package(unix), quiet, traverse }
ocamlfind ocamldep -package unix -package str -modules src/hopix/hopixInterpreter.ml > src/hopix/hopixInterpreter.ml.depends
# Target: src/hopix/hopixAST.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:src/hopix/hopixAST.cmo, file:src/hopix/hopixAST.ml, implem, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlc -c -package unix -package str -I src/hopix -I src -I src/utilities -I src/common -I src/lib/pprint -o src/hopix/hopixAST.cmo src/hopix/hopixAST.ml
# Target: src/hopix/hopixLexer.mll, tags: { extension:mll, file:src/hopix/hopixLexer.mll, lexer, ocaml, ocamllex, package(str), package(unix), quiet, traverse }
/usr/bin/ocamllex -q src/hopix/hopixLexer.mll
# Target: src/hopix/hopixLexer.ml.depends, tags: { extension:ml, file:src/hopix/hopixLexer.ml, ocaml, ocamldep, package(str), package(unix), quiet, traverse }
ocamlfind ocamldep -package unix -package str -modules src/hopix/hopixLexer.ml > src/hopix/hopixLexer.ml.depends
# Target: src/hopix/hopixParser.mly.depends, tags: { extension:mly, file:src/hopix/hopixParser.mly, menhir_ocamldep, ocaml, ocamldep, package(str), package(unix), quiet, traverse }
menhir --raw-depend --ocamldep 'ocamlfind ocamldep -modules' src/hopix/hopixParser.mly > src/hopix/hopixParser.mly.depends
+ menhir --raw-depend --ocamldep 'ocamlfind ocamldep -modules' src/hopix/hopixParser.mly > src/hopix/hopixParser.mly.depends
File "src/hopix/hopixParser.mly", line 11, characters 37-42:
Warning: the token COMMA is unused.
File "src/hopix/hopixParser.mly", line 12, characters 7-14:
Warning: the token LCBRACK is unused.
File "src/hopix/hopixParser.mly", line 13, characters 7-14:
Warning: the token LSBRACK is unused.
File "src/hopix/hopixParser.mly", line 9, characters 7-13:
Warning: the token RARROW is unused.
File "src/hopix/hopixParser.mly", line 12, characters 15-22:
Warning: the token RCBRACK is unused.
File "src/hopix/hopixParser.mly", line 13, characters 15-22:
Warning: the token RSBRACK is unused.
File "src/hopix/hopixParser.mly", line 11, characters 7-16:
Warning: the token SEMICOLON is unused.
File "src/hopix/hopixParser.mly", line 8, characters 11-15:
Warning: the token TYPE is unused.
# Target: src/hopix/hopixParser.mly, tags: { byte, compile, extension:mly, file:src/hopix/hopixParser.mly, menhir, ocaml, package(str), package(unix), parser, quiet, traverse }
menhir --ocamlc 'ocamlfind ocamlc -package unix -package str -I src/hopix -I src -I src/utilities -I src/common -I src/lib/pprint' --explain --infer src/hopix/hopixParser.mly
+ menhir --ocamlc 'ocamlfind ocamlc -package unix -package str -I src/hopix -I src -I src/utilities -I src/common -I src/lib/pprint' --explain --infer src/hopix/hopixParser.mly
File "src/hopix/hopixParser.mly", line 11, characters 37-42:
Warning: the token COMMA is unused.
File "src/hopix/hopixParser.mly", line 12, characters 7-14:
Warning: the token LCBRACK is unused.
File "src/hopix/hopixParser.mly", line 13, characters 7-14:
Warning: the token LSBRACK is unused.
File "src/hopix/hopixParser.mly", line 9, characters 7-13:
Warning: the token RARROW is unused.
File "src/hopix/hopixParser.mly", line 12, characters 15-22:
Warning: the token RCBRACK is unused.
File "src/hopix/hopixParser.mly", line 13, characters 15-22:
Warning: the token RSBRACK is unused.
File "src/hopix/hopixParser.mly", line 11, characters 7-16:
Warning: the token SEMICOLON is unused.
File "src/hopix/hopixParser.mly", line 8, characters 11-15:
Warning: the token TYPE is unused.
# Target: src/hopix/hopixParser.mli.depends, tags: { extension:mli, file:src/hopix/hopixParser.mli, ocaml, ocamldep, package(str), package(unix), quiet, traverse }
ocamlfind ocamldep -package unix -package str -modules src/hopix/hopixParser.mli > src/hopix/hopixParser.mli.depends
# Target: src/hopix/hopixParser.cmi, tags: { byte, compile, extension:mli, file:src/hopix/hopixParser.mli, interf, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlc -c -package unix -package str -I src/hopix -I src -I src/utilities -I src/common -I src/lib/pprint -o src/hopix/hopixParser.cmi src/hopix/hopixParser.mli
# Target: src/hopix/hopixPrettyPrinter.ml.depends, tags: { extension:ml, file:src/hopix/hopixPrettyPrinter.ml, ocaml, ocamldep, package(str), package(unix), quiet, traverse }
ocamlfind ocamldep -package unix -package str -modules src/hopix/hopixPrettyPrinter.ml > src/hopix/hopixPrettyPrinter.ml.depends
# Target: src/utilities/extPPrint.ml.depends, tags: { extension:ml, file:src/utilities/extPPrint.ml, ocaml, ocamldep, package(str), package(unix), quiet, traverse }
ocamlfind ocamldep -package unix -package str -modules src/utilities/extPPrint.ml > src/utilities/extPPrint.ml.depends
# Target: src/lib/pprint/PPrint.ml.depends, tags: { extension:ml, file:src/lib/pprint/PPrint.ml, ocaml, ocamldep, package(str), package(unix), quiet, traverse }
ocamlfind ocamldep -package unix -package str -modules src/lib/pprint/PPrint.ml > src/lib/pprint/PPrint.ml.depends
# Target: src/lib/pprint/PPrintCombinators.mli.depends, tags: { extension:mli, file:src/lib/pprint/PPrintCombinators.mli, ocaml, ocamldep, package(str), package(unix), quiet, traverse }
ocamlfind ocamldep -package unix -package str -modules src/lib/pprint/PPrintCombinators.mli > src/lib/pprint/PPrintCombinators.mli.depends
# Target: src/lib/pprint/PPrintEngine.mli.depends, tags: { extension:mli, file:src/lib/pprint/PPrintEngine.mli, ocaml, ocamldep, package(str), package(unix), quiet, traverse }
ocamlfind ocamldep -package unix -package str -modules src/lib/pprint/PPrintEngine.mli > src/lib/pprint/PPrintEngine.mli.depends
# Target: src/lib/pprint/PPrintRenderer.ml.depends, tags: { extension:ml, file:src/lib/pprint/PPrintRenderer.ml, ocaml, ocamldep, package(str), package(unix), quiet, traverse }
ocamlfind ocamldep -package unix -package str -modules src/lib/pprint/PPrintRenderer.ml > src/lib/pprint/PPrintRenderer.ml.depends
# Target: src/lib/pprint/PPrintRenderer.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:src/lib/pprint/PPrintRenderer.cmo, file:src/lib/pprint/PPrintRenderer.ml, implem, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlc -c -package unix -package str -I src/lib/pprint -I src -I src/hopix -I src/utilities -I src/common -o src/lib/pprint/PPrintRenderer.cmo src/lib/pprint/PPrintRenderer.ml
# Target: src/lib/pprint/PPrintEngine.cmi, tags: { byte, compile, extension:mli, file:src/lib/pprint/PPrintEngine.mli, interf, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlc -c -package unix -package str -I src/lib/pprint -I src -I src/hopix -I src/utilities -I src/common -o src/lib/pprint/PPrintEngine.cmi src/lib/pprint/PPrintEngine.mli
# Target: src/lib/pprint/PPrintOCaml.mli.depends, tags: { extension:mli, file:src/lib/pprint/PPrintOCaml.mli, ocaml, ocamldep, package(str), package(unix), quiet, traverse }
ocamlfind ocamldep -package unix -package str -modules src/lib/pprint/PPrintOCaml.mli > src/lib/pprint/PPrintOCaml.mli.depends
# Target: src/lib/pprint/PPrintCombinators.cmi, tags: { byte, compile, extension:mli, file:src/lib/pprint/PPrintCombinators.mli, interf, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlc -c -package unix -package str -I src/lib/pprint -I src -I src/hopix -I src/utilities -I src/common -o src/lib/pprint/PPrintCombinators.cmi src/lib/pprint/PPrintCombinators.mli
# Target: src/lib/pprint/PPrintOCaml.cmi, tags: { byte, compile, extension:mli, file:src/lib/pprint/PPrintOCaml.mli, interf, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlc -c -package unix -package str -I src/lib/pprint -I src -I src/hopix -I src/utilities -I src/common -o src/lib/pprint/PPrintOCaml.cmi src/lib/pprint/PPrintOCaml.mli
# Target: src/lib/pprint/PPrint.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:src/lib/pprint/PPrint.cmo, file:src/lib/pprint/PPrint.ml, implem, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlc -c -package unix -package str -I src/lib/pprint -I src -I src/hopix -I src/utilities -I src/common -o src/lib/pprint/PPrint.cmo src/lib/pprint/PPrint.ml
# Target: src/utilities/extPPrint.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:src/utilities/extPPrint.cmo, file:src/utilities/extPPrint.ml, implem, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlc -c -package unix -package str -I src/utilities -I src -I src/hopix -I src/common -I src/lib/pprint -o src/utilities/extPPrint.cmo src/utilities/extPPrint.ml
# Target: src/hopix/hopixTypechecker.ml.depends, tags: { extension:ml, file:src/hopix/hopixTypechecker.ml, ocaml, ocamldep, package(str), package(unix), quiet, traverse }
ocamlfind ocamldep -package unix -package str -modules src/hopix/hopixTypechecker.ml > src/hopix/hopixTypechecker.ml.depends
# Target: src/hopix/hopixTypes.ml.depends, tags: { extension:ml, file:src/hopix/hopixTypes.ml, ocaml, ocamldep, package(str), package(unix), quiet, traverse }
ocamlfind ocamldep -package unix -package str -modules src/hopix/hopixTypes.ml > src/hopix/hopixTypes.ml.depends
# Target: src/hopix/hopixTypes.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:src/hopix/hopixTypes.cmo, file:src/hopix/hopixTypes.ml, implem, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlc -c -package unix -package str -I src/hopix -I src -I src/utilities -I src/common -I src/lib/pprint -o src/hopix/hopixTypes.cmo src/hopix/hopixTypes.ml
# Target: src/utilities/syntacticAnalysis.mli.depends, tags: { extension:mli, file:src/utilities/syntacticAnalysis.mli, ocaml, ocamldep, package(str), package(unix), quiet, traverse }
ocamlfind ocamldep -package unix -package str -modules src/utilities/syntacticAnalysis.mli > src/utilities/syntacticAnalysis.mli.depends
# Target: src/hopix/hopixInterpreter.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:src/hopix/hopixInterpreter.cmo, file:src/hopix/hopixInterpreter.ml, implem, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlc -c -package unix -package str -I src/hopix -I src -I src/utilities -I src/common -I src/lib/pprint -o src/hopix/hopixInterpreter.cmo src/hopix/hopixInterpreter.ml
+ ocamlfind ocamlc -c -package unix -package str -I src/hopix -I src -I src/utilities -I src/common -I src/lib/pprint -o src/hopix/hopixInterpreter.cmo src/hopix/hopixInterpreter.ml
File "src/hopix/hopixInterpreter.ml", line 139, characters 2-139:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
(DeclareExtern (_, _)|DefineRecValue _|DefineType (_, _, _))
File "src/hopix/hopixInterpreter.ml", line 147, characters 34-711:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
(DefineRec (_, _)|Fun (_, _)|Tagged (_, _)|Case (_, _)|TypeAnnotation (_, _)|
Record _|Field (_, _)|ChangeField (_, _, _))
File "src/hopix/hopixInterpreter.ml", line 175, characters 14-66:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
(LString _|LChar _)
# Target: src/hopix/hopixLexer.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:src/hopix/hopixLexer.cmo, file:src/hopix/hopixLexer.ml, implem, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlc -c -package unix -package str -I src/hopix -I src -I src/utilities -I src/common -I src/lib/pprint -o src/hopix/hopixLexer.cmo src/hopix/hopixLexer.ml
# Target: src/hopix/hopixPrettyPrinter.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:src/hopix/hopixPrettyPrinter.cmo, file:src/hopix/hopixPrettyPrinter.ml, implem, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlc -c -package unix -package str -I src/hopix -I src -I src/utilities -I src/common -I src/lib/pprint -o src/hopix/hopixPrettyPrinter.cmo src/hopix/hopixPrettyPrinter.ml
# Target: src/hopix/hopixTypechecker.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:src/hopix/hopixTypechecker.cmo, file:src/hopix/hopixTypechecker.ml, implem, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlc -c -package unix -package str -I src/hopix -I src -I src/utilities -I src/common -I src/lib/pprint -o src/hopix/hopixTypechecker.cmo src/hopix/hopixTypechecker.ml
# Target: src/utilities/syntacticAnalysis.cmi, tags: { byte, compile, extension:mli, file:src/utilities/syntacticAnalysis.mli, interf, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlc -c -package unix -package str -I src/utilities -I src -I src/hopix -I src/common -I src/lib/pprint -o src/utilities/syntacticAnalysis.cmi src/utilities/syntacticAnalysis.mli
# Target: src/hopix/hopix.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:src/hopix/hopix.cmo, file:src/hopix/hopix.ml, implem, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlc -c -package unix -package str -I src/hopix -I src -I src/utilities -I src/common -I src/lib/pprint -o src/hopix/hopix.cmo src/hopix/hopix.ml
# Target: src/utilities/userInput.ml.depends, tags: { extension:ml, file:src/utilities/userInput.ml, ocaml, ocamldep, package(str), package(unix), quiet, traverse }
ocamlfind ocamldep -package unix -package str -modules src/utilities/userInput.ml > src/utilities/userInput.ml.depends
# Target: src/utilities/stdUserInput.ml.depends, tags: { extension:ml, file:src/utilities/stdUserInput.ml, ocaml, ocamldep, package(str), package(unix), quiet, traverse }
ocamlfind ocamldep -package unix -package str -modules src/utilities/stdUserInput.ml > src/utilities/stdUserInput.ml.depends
# Target: src/utilities/stdUserInput.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:src/utilities/stdUserInput.cmo, file:src/utilities/stdUserInput.ml, implem, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlc -c -package unix -package str -I src/utilities -I src -I src/hopix -I src/common -I src/lib/pprint -o src/utilities/stdUserInput.cmo src/utilities/stdUserInput.ml
# Target: src/commandLineOptions.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:src/commandLineOptions.cmo, file:src/commandLineOptions.ml, implem, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlc -c -package unix -package str -I src -I src/hopix -I src/utilities -I src/common -I src/lib/pprint -o src/commandLineOptions.cmo src/commandLineOptions.ml
# Target: src/hopix/hopixInitialization.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:src/hopix/hopixInitialization.cmo, file:src/hopix/hopixInitialization.ml, implem, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlc -c -package unix -package str -I src/hopix -I src -I src/utilities -I src/common -I src/lib/pprint -o src/hopix/hopixInitialization.cmo src/hopix/hopixInitialization.ml
# Target: src/utilities/userInput.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:src/utilities/userInput.cmo, file:src/utilities/userInput.ml, implem, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlc -c -package unix -package str -I src/utilities -I src -I src/hopix -I src/common -I src/lib/pprint -o src/utilities/userInput.cmo src/utilities/userInput.ml
# Target: src/flap.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:src/flap.cmo, file:src/flap.ml, implem, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlc -c -package unix -package str -I src -I src/hopix -I src/utilities -I src/common -I src/lib/pprint -o src/flap.cmo src/flap.ml
# Target: src/utilities/error.ml.depends, tags: { extension:ml, file:src/utilities/error.ml, ocaml, ocamldep, package(str), package(unix), quiet, traverse }
ocamlfind ocamldep -package unix -package str -modules src/utilities/error.ml > src/utilities/error.ml.depends
# Target: src/utilities/position.ml.depends, tags: { extension:ml, file:src/utilities/position.ml, ocaml, ocamldep, package(str), package(unix), quiet, traverse }
ocamlfind ocamldep -package unix -package str -modules src/utilities/position.ml > src/utilities/position.ml.depends
# Target: src/utilities/position.cmx, tags: { compile, extension:cmx, extension:ml, file:src/utilities/position.cmx, file:src/utilities/position.ml, implem, native, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlopt -c -package unix -package str -I src/utilities -I src -I src/hopix -I src/common -I src/lib/pprint -o src/utilities/position.cmx src/utilities/position.ml
# Target: src/utilities/error.cmx, tags: { compile, extension:cmx, extension:ml, file:src/utilities/error.cmx, file:src/utilities/error.ml, implem, native, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlopt -c -package unix -package str -I src/utilities -I src -I src/hopix -I src/common -I src/lib/pprint -o src/utilities/error.cmx src/utilities/error.ml
# Target: src/options.cmx, tags: { compile, extension:cmx, extension:ml, file:src/options.cmx, file:src/options.ml, implem, native, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlopt -c -package unix -package str -I src -I src/hopix -I src/utilities -I src/common -I src/lib/pprint -o src/options.cmx src/options.ml
# Target: src/version.cmx, tags: { compile, extension:cmx, extension:ml, file:src/version.cmx, file:src/version.ml, implem, native, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlopt -c -package unix -package str -I src -I src/hopix -I src/utilities -I src/common -I src/lib/pprint -o src/version.cmx src/version.ml
# Target: src/common/compilers.ml.depends, tags: { extension:ml, file:src/common/compilers.ml, ocaml, ocamldep, package(str), package(unix), quiet, traverse }
ocamlfind ocamldep -package unix -package str -modules src/common/compilers.ml > src/common/compilers.ml.depends
# Target: src/utilities/extStd.ml.depends, tags: { extension:ml, file:src/utilities/extStd.ml, ocaml, ocamldep, package(str), package(unix), quiet, traverse }
ocamlfind ocamldep -package unix -package str -modules src/utilities/extStd.ml > src/utilities/extStd.ml.depends
# Target: src/utilities/extStd.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:src/utilities/extStd.cmo, file:src/utilities/extStd.ml, implem, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlc -c -package unix -package str -I src/utilities -I src -I src/hopix -I src/common -I src/lib/pprint -o src/utilities/extStd.cmo src/utilities/extStd.ml
# Target: src/common/languages.ml.depends, tags: { extension:ml, file:src/common/languages.ml, ocaml, ocamldep, package(str), package(unix), quiet, traverse }
ocamlfind ocamldep -package unix -package str -modules src/common/languages.ml > src/common/languages.ml.depends
# Target: src/utilities/extStd.cmx, tags: { compile, extension:cmx, extension:ml, file:src/utilities/extStd.cmx, file:src/utilities/extStd.ml, implem, native, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlopt -c -package unix -package str -I src/utilities -I src -I src/hopix -I src/common -I src/lib/pprint -o src/utilities/extStd.cmx src/utilities/extStd.ml
# Target: src/common/languages.cmx, tags: { compile, extension:cmx, extension:ml, file:src/common/languages.cmx, file:src/common/languages.ml, implem, native, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlopt -c -package unix -package str -I src/common -I src -I src/hopix -I src/utilities -I src/lib/pprint -o src/common/languages.cmx src/common/languages.ml
# Target: src/common/compilers.cmx, tags: { compile, extension:cmx, extension:ml, file:src/common/compilers.cmx, file:src/common/compilers.ml, implem, native, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlopt -c -package unix -package str -I src/common -I src -I src/hopix -I src/utilities -I src/lib/pprint -o src/common/compilers.cmx src/common/compilers.ml
# Target: src/hopix/hopixAST.cmx, tags: { compile, extension:cmx, extension:ml, file:src/hopix/hopixAST.cmx, file:src/hopix/hopixAST.ml, implem, native, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlopt -c -package unix -package str -I src/hopix -I src -I src/utilities -I src/common -I src/lib/pprint -o src/hopix/hopixAST.cmx src/hopix/hopixAST.ml
# Target: src/hopix/hopixParser.ml.depends, tags: { extension:ml, file:src/hopix/hopixParser.ml, ocaml, ocamldep, package(str), package(unix), quiet, traverse }
ocamlfind ocamldep -package unix -package str -modules src/hopix/hopixParser.ml > src/hopix/hopixParser.ml.depends
# Target: src/hopix/hopixParser.cmx, tags: { compile, extension:cmx, extension:ml, file:src/hopix/hopixParser.cmx, file:src/hopix/hopixParser.ml, implem, native, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlopt -c -package unix -package str -I src/hopix -I src -I src/utilities -I src/common -I src/lib/pprint -o src/hopix/hopixParser.cmx src/hopix/hopixParser.ml
# Target: src/lib/pprint/PPrintCombinators.ml.depends, tags: { extension:ml, file:src/lib/pprint/PPrintCombinators.ml, ocaml, ocamldep, package(str), package(unix), quiet, traverse }
ocamlfind ocamldep -package unix -package str -modules src/lib/pprint/PPrintCombinators.ml > src/lib/pprint/PPrintCombinators.ml.depends
# Target: src/lib/pprint/PPrintEngine.ml.depends, tags: { extension:ml, file:src/lib/pprint/PPrintEngine.ml, ocaml, ocamldep, package(str), package(unix), quiet, traverse }
ocamlfind ocamldep -package unix -package str -modules src/lib/pprint/PPrintEngine.ml > src/lib/pprint/PPrintEngine.ml.depends
# Target: src/lib/pprint/PPrintRenderer.cmx, tags: { compile, extension:cmx, extension:ml, file:src/lib/pprint/PPrintRenderer.cmx, file:src/lib/pprint/PPrintRenderer.ml, implem, native, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlopt -c -package unix -package str -I src/lib/pprint -I src -I src/hopix -I src/utilities -I src/common -o src/lib/pprint/PPrintRenderer.cmx src/lib/pprint/PPrintRenderer.ml
# Target: src/lib/pprint/PPrintEngine.cmx, tags: { compile, extension:cmx, extension:ml, file:src/lib/pprint/PPrintEngine.cmx, file:src/lib/pprint/PPrintEngine.ml, implem, native, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlopt -c -package unix -package str -I src/lib/pprint -I src -I src/hopix -I src/utilities -I src/common -o src/lib/pprint/PPrintEngine.cmx src/lib/pprint/PPrintEngine.ml
# Target: src/lib/pprint/PPrintOCaml.ml.depends, tags: { extension:ml, file:src/lib/pprint/PPrintOCaml.ml, ocaml, ocamldep, package(str), package(unix), quiet, traverse }
ocamlfind ocamldep -package unix -package str -modules src/lib/pprint/PPrintOCaml.ml > src/lib/pprint/PPrintOCaml.ml.depends
# Target: src/lib/pprint/PPrintCombinators.cmx, tags: { compile, extension:cmx, extension:ml, file:src/lib/pprint/PPrintCombinators.cmx, file:src/lib/pprint/PPrintCombinators.ml, implem, native, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlopt -c -package unix -package str -I src/lib/pprint -I src -I src/hopix -I src/utilities -I src/common -o src/lib/pprint/PPrintCombinators.cmx src/lib/pprint/PPrintCombinators.ml
# Target: src/lib/pprint/PPrintOCaml.cmx, tags: { compile, extension:cmx, extension:ml, file:src/lib/pprint/PPrintOCaml.cmx, file:src/lib/pprint/PPrintOCaml.ml, implem, native, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlopt -c -package unix -package str -I src/lib/pprint -I src -I src/hopix -I src/utilities -I src/common -o src/lib/pprint/PPrintOCaml.cmx src/lib/pprint/PPrintOCaml.ml
# Target: src/lib/pprint/PPrint.cmx, tags: { compile, extension:cmx, extension:ml, file:src/lib/pprint/PPrint.cmx, file:src/lib/pprint/PPrint.ml, implem, native, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlopt -c -package unix -package str -I src/lib/pprint -I src -I src/hopix -I src/utilities -I src/common -o src/lib/pprint/PPrint.cmx src/lib/pprint/PPrint.ml
# Target: src/utilities/extPPrint.cmx, tags: { compile, extension:cmx, extension:ml, file:src/utilities/extPPrint.cmx, file:src/utilities/extPPrint.ml, implem, native, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlopt -c -package unix -package str -I src/utilities -I src -I src/hopix -I src/common -I src/lib/pprint -o src/utilities/extPPrint.cmx src/utilities/extPPrint.ml
# Target: src/hopix/hopixTypes.cmx, tags: { compile, extension:cmx, extension:ml, file:src/hopix/hopixTypes.cmx, file:src/hopix/hopixTypes.ml, implem, native, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlopt -c -package unix -package str -I src/hopix -I src -I src/utilities -I src/common -I src/lib/pprint -o src/hopix/hopixTypes.cmx src/hopix/hopixTypes.ml
# Target: src/utilities/syntacticAnalysis.ml.depends, tags: { extension:ml, file:src/utilities/syntacticAnalysis.ml, ocaml, ocamldep, package(str), package(unix), quiet, traverse }
ocamlfind ocamldep -package unix -package str -modules src/utilities/syntacticAnalysis.ml > src/utilities/syntacticAnalysis.ml.depends
# Target: src/hopix/hopixInterpreter.cmx, tags: { compile, extension:cmx, extension:ml, file:src/hopix/hopixInterpreter.cmx, file:src/hopix/hopixInterpreter.ml, implem, native, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlopt -c -package unix -package str -I src/hopix -I src -I src/utilities -I src/common -I src/lib/pprint -o src/hopix/hopixInterpreter.cmx src/hopix/hopixInterpreter.ml
+ ocamlfind ocamlopt -c -package unix -package str -I src/hopix -I src -I src/utilities -I src/common -I src/lib/pprint -o src/hopix/hopixInterpreter.cmx src/hopix/hopixInterpreter.ml
File "src/hopix/hopixInterpreter.ml", line 139, characters 2-139:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
(DeclareExtern (_, _)|DefineRecValue _|DefineType (_, _, _))
File "src/hopix/hopixInterpreter.ml", line 147, characters 34-711:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
(DefineRec (_, _)|Fun (_, _)|Tagged (_, _)|Case (_, _)|TypeAnnotation (_, _)|
Record _|Field (_, _)|ChangeField (_, _, _))
File "src/hopix/hopixInterpreter.ml", line 175, characters 14-66:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
(LString _|LChar _)
# Target: src/hopix/hopixLexer.cmx, tags: { compile, extension:cmx, extension:ml, file:src/hopix/hopixLexer.cmx, file:src/hopix/hopixLexer.ml, implem, native, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlopt -c -package unix -package str -I src/hopix -I src -I src/utilities -I src/common -I src/lib/pprint -o src/hopix/hopixLexer.cmx src/hopix/hopixLexer.ml
# Target: src/hopix/hopixPrettyPrinter.cmx, tags: { compile, extension:cmx, extension:ml, file:src/hopix/hopixPrettyPrinter.cmx, file:src/hopix/hopixPrettyPrinter.ml, implem, native, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlopt -c -package unix -package str -I src/hopix -I src -I src/utilities -I src/common -I src/lib/pprint -o src/hopix/hopixPrettyPrinter.cmx src/hopix/hopixPrettyPrinter.ml
# Target: src/hopix/hopixTypechecker.cmx, tags: { compile, extension:cmx, extension:ml, file:src/hopix/hopixTypechecker.cmx, file:src/hopix/hopixTypechecker.ml, implem, native, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlopt -c -package unix -package str -I src/hopix -I src -I src/utilities -I src/common -I src/lib/pprint -o src/hopix/hopixTypechecker.cmx src/hopix/hopixTypechecker.ml
# Target: src/utilities/syntacticAnalysis.cmx, tags: { compile, extension:cmx, extension:ml, file:src/utilities/syntacticAnalysis.cmx, file:src/utilities/syntacticAnalysis.ml, implem, native, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlopt -c -package unix -package str -I src/utilities -I src -I src/hopix -I src/common -I src/lib/pprint -o src/utilities/syntacticAnalysis.cmx src/utilities/syntacticAnalysis.ml
# Target: src/hopix/hopix.cmx, tags: { compile, extension:cmx, extension:ml, file:src/hopix/hopix.cmx, file:src/hopix/hopix.ml, implem, native, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlopt -c -package unix -package str -I src/hopix -I src -I src/utilities -I src/common -I src/lib/pprint -o src/hopix/hopix.cmx src/hopix/hopix.ml
# Target: src/utilities/stdUserInput.cmx, tags: { compile, extension:cmx, extension:ml, file:src/utilities/stdUserInput.cmx, file:src/utilities/stdUserInput.ml, implem, native, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlopt -c -package unix -package str -I src/utilities -I src -I src/hopix -I src/common -I src/lib/pprint -o src/utilities/stdUserInput.cmx src/utilities/stdUserInput.ml
# Target: src/commandLineOptions.cmx, tags: { compile, extension:cmx, extension:ml, file:src/commandLineOptions.cmx, file:src/commandLineOptions.ml, implem, native, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlopt -c -package unix -package str -I src -I src/hopix -I src/utilities -I src/common -I src/lib/pprint -o src/commandLineOptions.cmx src/commandLineOptions.ml
# Target: src/hopix/hopixInitialization.cmx, tags: { compile, extension:cmx, extension:ml, file:src/hopix/hopixInitialization.cmx, file:src/hopix/hopixInitialization.ml, implem, native, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlopt -c -package unix -package str -I src/hopix -I src -I src/utilities -I src/common -I src/lib/pprint -o src/hopix/hopixInitialization.cmx src/hopix/hopixInitialization.ml
# Target: src/utilities/userInput.cmx, tags: { compile, extension:cmx, extension:ml, file:src/utilities/userInput.cmx, file:src/utilities/userInput.ml, implem, native, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlopt -c -package unix -package str -I src/utilities -I src -I src/hopix -I src/common -I src/lib/pprint -o src/utilities/userInput.cmx src/utilities/userInput.ml
# Target: src/flap.cmx, tags: { compile, extension:cmx, extension:ml, file:src/flap.cmx, file:src/flap.ml, implem, native, ocaml, package(str), package(unix), quiet, traverse }
ocamlfind ocamlopt -c -package unix -package str -I src -I src/hopix -I src/utilities -I src/common -I src/lib/pprint -o src/flap.cmx src/flap.ml
# Target: src/flap.native, tags: { dont_link_with, extension:native, file:src/flap.native, link, native, ocaml, package(str), package(unix), program, quiet, traverse }
ocamlfind ocamlopt -linkpkg -package unix -package str src/utilities/position.cmx src/utilities/error.cmx src/options.cmx src/version.cmx src/commandLineOptions.cmx src/common/languages.cmx src/utilities/extStd.cmx src/common/compilers.cmx src/hopix/hopixAST.cmx src/hopix/hopixInterpreter.cmx src/hopix/hopixParser.cmx src/hopix/hopixLexer.cmx src/lib/pprint/PPrintRenderer.cmx src/lib/pprint/PPrintEngine.cmx src/lib/pprint/PPrintCombinators.cmx src/lib/pprint/PPrintOCaml.cmx src/lib/pprint/PPrint.cmx src/utilities/extPPrint.cmx src/hopix/hopixPrettyPrinter.cmx src/hopix/hopixTypes.cmx src/hopix/hopixTypechecker.cmx src/utilities/syntacticAnalysis.cmx src/hopix/hopix.cmx src/hopix/hopixInitialization.cmx src/utilities/stdUserInput.cmx src/utilities/userInput.cmx src/flap.cmx -o src/flap.native
# Compilation successful.
